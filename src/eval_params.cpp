/*
*  Igel - a UCI chess playing engine derived from GreKo 2018.01
*
*  Copyright (C) 2002-2018 Vladimir Medvedev <vrm@bk.ru> (GreKo author)
*  Copyright (C) 2018-2019 Volodymyr Shcherbyna <volodymyr@shcherbyna.com>
*
*  Igel is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  Igel is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with Igel.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "eval_params.h"
#include "notation.h"
#include "utils.h"

vector<int> W;
int NUM_PARAMS = 0;

Line lines[NUM_LINES] =
{
    Line("Mid_Pawn", 64),
    Line("Mid_Knight", 64),
    Line("Mid_Bishop", 64),
    Line("Mid_Rook", 64),
    Line("Mid_Queen", 64),
    Line("Mid_King", 64),
    Line("Mid_PawnPassed", 64),
    Line("Mid_PawnPassedBlocked", 64),
    Line("Mid_PawnPassedFree", 64),
    Line("Mid_PawnConnectedFree", 64),
    Line("Mid_PawnDoubled", 64),
    Line("Mid_PawnIsolated", 64),
    Line("Mid_PawnDoubledIsolated", 64),
    Line("Mid_PawnBlocked", 64),
    Line("Mid_PawnFence", 64),
    Line("Mid_PawnOnBiColor", 1),
    Line("Mid_KnightStrong", 64),
    Line("Mid_KnightForpost", 64),
    Line("Mid_KnightKingDist", 10),
    Line("Mid_KnightAndQueen", 1),
    Line("Mid_BishopStrong", 64),
    Line("Mid_BishopMobility", 14),
    Line("Mid_KnightMobility", 9),
    Line("Mid_BishopKingDist", 10),
    Line("Mid_BishopAndRook", 1),
    Line("Mid_RookMobility", 15),
    Line("Mid_QueenMobility", 28),
    Line("Mid_RookOpen", 1),
    Line("Mid_Rook7th", 1),
    Line("Mid_RookKingDist", 10),
    Line("Mid_Queen7th", 1),
    Line("Mid_QueenKingDist", 10),
    Line("Mid_KingPawnShield", 10),
    Line("Mid_KingPawnStorm", 10),
    Line("Mid_KingPassedDist", 10),
    Line("Mid_KingExposed", 28),
    Line("Mid_AttackKingZone", 4),
    Line("Mid_AttackStronger", 1),
    Line("Mid_AttackCenter", 1),
    Line("Mid_ConnectedRooks", 1),
    Line("Mid_BishopsPair", 1),
    Line("Mid_RooksPair", 1),
    Line("Mid_KnightsPair", 1),
    Line("Mid_Tempo", 1),

    Line("End_Pawn", 64),
    Line("End_Knight", 64),
    Line("End_Bishop", 64),
    Line("End_Rook", 64),
    Line("End_Queen", 64),
    Line("End_King", 64),
    Line("End_PawnPassed", 64),
    Line("End_PawnPassedBlocked", 64),
    Line("End_PawnPassedFree", 64),
    Line("End_PawnConnectedFree", 64),
    Line("End_PawnDoubled", 64),
    Line("End_PawnIsolated", 64),
    Line("End_PawnDoubledIsolated", 64),
    Line("End_PawnBlocked", 64),
    Line("End_PawnFence", 64),
    Line("End_PawnOnBiColor", 1),
    Line("End_KnightStrong", 64),
    Line("End_KnightForpost", 64),
    Line("End_KnightKingDist", 10),
    Line("End_KnightAndQueen", 1),
    Line("End_BishopStrong", 64),
    Line("End_BishopMobility", 14),
    Line("End_KnightMobility", 9),
    Line("End_BishopKingDist", 10),
    Line("End_BishopAndRook", 1),
    Line("End_RookMobility", 15),
    Line("End_QueenMobility", 28),
    Line("End_RookOpen", 1),
    Line("End_Rook7th", 1),
    Line("End_RookKingDist", 10),
    Line("End_Queen7th", 1),
    Line("End_QueenKingDist", 10),
    Line("End_KingPawnShield", 10),
    Line("End_KingPawnStorm", 10),
    Line("End_KingExposed", 28),
    Line("End_KingPassedDist", 10),
    Line("End_AttackKingZone", 4),
    Line("End_AttackStronger", 1),
    Line("End_AttackCenter", 1),
    Line("End_ConnectedRooks", 1),
    Line("End_BishopsPair", 1),
    Line("End_RooksPair", 1),
    Line("End_KnightsPair", 1),
    Line("End_Tempo", 1)
};

void InitParamLines()
{
    for (int i = 1; i < NUM_LINES; ++i)
        lines[i].start = lines[i - 1].start + lines[i - 1].len;
    NUM_PARAMS = lines[NUM_LINES - 1].start + lines[NUM_LINES - 1].len;
}

void SetMaterialOnlyValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);
}

void SetDefaultValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);

    static const int data[2666] = {0, 0, 0, 0, 0, 0, 0, 0, 95, 53, 51, 206, 166, 248, 111, -28, -10, -19, 28, 3, 76, 94, 34, -12, -3, 6, -1, 30, 18, 8, -3, -2, -6, -10, 1, 21, 18, 7, -18, -18, -1, -7, 0, -4, 3, 0, 10, -3, -12, 2, -17, -9, -17, 15, 20, -13, 0, 0, 0, 0, 0, 0, 0, 0, -194, -108, -55, -50, 6, -96, -78, -126, -102, -57, 43, 1, 14, 22, 8, -27, -78, 19, 2, 43, 62, 119, 43, 25, -5, 25, 14, 46, 35, 76, 26, 21, -2, 14, 15, 16, 26, 20, 37, -1, -18, 8, 20, 32, 45, 32, 43, -3, -16, -34, 4, 19, 16, 24, 7, -1, -91, -9, -40, -15, 12, -13, -6, -1, -43, -12, -119, -56, -21, -47, -28, 7, -43, -12, -29, -47, -7, 41, -12, -72, -11, 17, 29, 29, 20, 55, 34, 15, -6, 19, 18, 52, 42, 45, 26, 2, -6, 10, 14, 41, 40, 18, 12, 26, 7, 15, 30, 24, 28, 43, 28, 16, 7, 33, 21, 17, 17, 34, 45, 18, -22, 4, 3, -6, 13, -10, -37, -20, 34, 56, 38, 75, 50, 3, 12, 5, 26, 45, 74, 73, 59, 75, 38, 41, 10, 42, 43, 58, 31, 57, 68, 9, -15, -2, 26, 42, 23, 39, 0, -6, -21, -12, 9, 13, 17, 2, 11, -15, -28, -14, 1, -3, 10, 17, 0, -28, -34, -7, -9, 5, 13, 17, -3, -71, -9, -4, 11, 22, 20, 12, -33, -10, -21, 18, 27, 3, 54, 39, 27, 54, -19, -19, 1, 10, -51, 50, 8, 52, -9, -16, -10, -37, 6, 34, 7, 18, -41, -28, -30, -35, -23, -10, -16, -19, -9, -32, -20, -19, -13, -14, -5, -7, -10, 7, -12, -12, -7, -2, 8, 11, -33, -8, 9, 2, 9, 13, -13, 9, 12, -8, 5, 13, -4, -18, -25, -63, -29, 19, 46, 7, -2, -2, 6, 2, 21, 85, 37, 32, 6, 84, 30, -9, 51, 67, 119, 79, 59, 189, 202, 7, 6, 71, 113, 87, 54, 82, 61, -5, -48, 11, 32, 7, 11, 10, -3, -54, 5, 0, 7, -2, -5, 1, 12, -22, -26, 7, -3, -50, -38, -15, 10, -3, -59, 21, 1, -74, -16, -50, 7, -15, 0, 0, 0, 0, 0, 0, 0, 0, 193, 144, 98, 24, 51, 68, 65, 285, 93, 75, 27, 35, 39, 43, 57, 30, 21, 20, 30, 15, 39, 85, 46, 9, 0, 0, -20, -14, 0, 8, 7, 11, -32, -22, -24, -31, -8, 6, 1, 5, -14, -12, -9, -40, -26, -10, -6, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -10, -14, -38, -13, -10, -40, -220, -41, -15, 41, 9, -31, 49, -16, -7, 13, -26, -2, -2, 11, -35, 18, 21, 4, -21, -27, -1, 6, 48, 3, 12, -9, 5, 7, -10, 5, 20, 0, 18, -21, -20, -11, -14, 22, 3, 11, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 4, 49, 50, 12, -18, -24, 91, 53, 52, 17, 53, 5, 39, -2, 77, -15, 4, -2, 5, -11, -16, 21, 25, -27, -3, 1, -1, -1, -5, 1, 0, -3, -4, -1, -6, -9, -4, 0, -10, -7, 7, 8, 2, 6, 1, -6, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 11, -8, 17, 155, -23, 31, 59, 26, 84, 68, 56, 40, 182, 195, 76, 55, 58, 42, 42, 64, 27, 28, 127, 4, -2, -18, 0, -10, 15, 12, -4, -2, 1, 11, 54, 3, -1, -13, -33, -12, 6, 1, -1, -16, 16, 1, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, -42, -121, -10, -11, -17, -12, -43, -33, -41, -10, 5, -27, -7, 61, -74, -32, 28, 1, -13, -4, 7, 37, -44, -40, 21, -18, -12, 1, 2, 30, -30, -60, -20, -16, 17, -38, 1, 4, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 64, 1, 3, -12, 33, 6, -2, 1, 6, 0, 1, 9, -1, 14, 2, 19, -5, -10, -26, -42, -4, 8, 0, 0, -4, -17, -32, -38, -32, -4, 0, 0, -9, -25, -31, -28, -23, -29, -15, -4, -12, 3, -22, -10, -16, -19, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -22, 6, -35, -17, -2, -35, 4, 8, 2, -1, 14, -6, 12, 1, 41, -17, -37, -10, 0, -3, 3, -22, 14, 9, -20, 2, -7, 4, 2, -22, 5, 2, -5, 3, -4, 60, -6, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 12, -7, 1, 7, 9, 10, 5, 24, -10, 1, 10, -23, -31, -2, 0, 2, 0, -12, -8, -7, -29, -13, 1, -4, -9, -4, -10, -6, -6, 12, -5, 0, -3, 0, 2, -1, -3, -1, -6, 0, -10, -38, -22, -8, -6, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -14, -46, -95, -5, 10, 5, 0, -8, -3, -12, 0, -4, -4, -2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 2, -1, -3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 28, 1, 32, 2, -3, 42, 1, 0, -11, 3, -21, -4, 10, 35, -28, 6, 137, 62, 41, 18, 71, 30, 28, 37, 11, 18, 36, 43, 39, 61, 104, 44, 33, 11, 38, 46, 30, 67, 11, 43, 10, 10, 15, -6, 15, -3, -25, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -11, 0, 1, 8, -1, -1, -1, 14, -50, 4, 4, 0, 114, 152, -46, 25, 4, -37, -52, -2, 17, -28, -5, -18, 3, 6, -15, 33, -50, 8, 36, 40, 80, -41, -16, 8, 17, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 12, 23, 11, 13, 2, 9, -32, 34, -3, 4, 7, 13, 71, 8, 9, -1, 79, 5, 67, 49, 19, 54, 11, 33, 39, 85, -1, 22, 41, 27, 54, -32, 15, 23, 23, 36, 60, 70, 49, -9, 7, 44, 48, 51, 81, 25, 6, 100, 63, 9, 45, 41, 22, 10, 24, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -8, 1, 8, 15, 16, 18, 15, 20, 20, 44, 33, 11, 14, -36, -17, -7, -3, 6, 11, 13, 20, 32, 0, 42, 20, 4, 10, 13, 14, 14, 18, 20, 39, -13, -9, -5, -2, -3, 2, 6, 14, 17, 30, 41, 61, 58, 47, 42, -24, -19, -16, -11, -6, -6, -3, -1, 4, 11, 10, 19, 27, 38, 28, 56, 45, 51, 56, 61, 63, 73, 63, 70, 27, 28, 117, 29, 33, -2, 0, 33, 23, 9, 5, 3, 2, -3, -4, 1, -22, 0, 674, 93, 34, 19, 14, 15, 1, 4, -19, 35, 28, 15, 13, 5, -1, -4, -17, -6, -38, 5, 5, -4, -22, -33, -32, -76, -47, -1, -1, -54, -35, -19, -12, -6, -4, 0, 0, 18, 10, 0, 0, 0, 19, 61, 27, 24, 17, 13, 11, 10, 4, -5, -5, -21, -22, -25, -51, -37, -13, -68, -19, -38, -51, -57, 0, 0, 0, -13, -12, 32, 139, 82, 1, 2, 54, 32, 67, 37, 0, 0, 0, 0, 0, 0, 0, 0, 167, 165, 159, 118, 120, 95, 156, 155, 87, 114, 90, 70, 57, 47, 84, 85, 33, 26, 23, 15, 13, 15, 24, 23, 6, 14, 1, -2, -2, -2, 9, 0, -4, 8, -4, 1, 4, -3, -3, -13, 9, 5, 12, 5, 17, -3, -3, -14, 0, 0, 0, 0, 0, 0, 0, 0, -17, -17, -2, -17, -11, -18, -45, -66, 0, 8, -15, 15, 0, -8, -16, -42, -2, -5, 25, 14, 2, -7, -13, -35, 0, 14, 32, 28, 29, 12, 9, -12, 2, 1, 29, 26, 26, 24, 14, -8, -3, 9, 9, 23, 14, 8, -14, -9, -20, -5, 1, -1, 9, -9, -10, -31, -5, -24, -2, 4, -9, -8, -30, -46, -10, -21, -3, -6, -9, -7, -10, -25, -1, 0, 6, -9, 3, -9, 4, -3, -8, -5, -5, -2, -1, -3, -7, -5, -1, -1, 6, 8, 13, -1, -6, -6, -6, -3, 7, 11, 1, 7, -9, -18, -11, -6, 4, 3, 10, -8, -8, -18, -24, -25, -13, -7, 0, -12, -25, -39, -21, -14, -12, -7, -11, -9, -7, -20, 30, 22, 24, 16, 26, 34, 28, 36, 25, 18, 11, 9, 6, 12, 26, 18, 27, 23, 20, 18, 18, 17, 15, 17, 32, 26, 29, 19, 26, 27, 25, 30, 30, 30, 25, 18, 15, 18, 13, 19, 22, 21, 10, 16, 9, 4, 14, 9, 19, 14, 18, 16, 4, 2, 7, 34, 10, 14, 13, 4, 0, 0, 19, 2, 13, 31, 19, 9, -13, 5, 9, 21, 31, 34, 27, 11, 23, -11, 21, 5, 7, 12, -7, 26, 2, -19, 2, -8, 54, 40, 6, 18, 10, 3, 43, 25, 16, 38, 13, 33, 7, 7, 10, 10, 26, -15, 33, 0, -2, 10, 16, 16, 21, 5, 10, 1, 0, 2, -7, 6, 5, 11, 13, -18, 13, 6, 18, 15, -75, -20, -12, -15, -4, 13, 7, -4, -13, 2, 16, 22, 24, 23, 17, 8, -2, 8, 10, 11, 17, 23, 9, 5, -21, 5, 9, 25, 26, 19, 12, -8, -17, -5, 17, 28, 29, 20, 3, -8, -18, 1, 14, 25, 26, 19, 9, -6, -13, -3, 12, 24, 27, 15, 4, -9, -37, -30, -13, 10, -13, 7, -17, -38, 0, 0, 0, 0, 0, 0, 0, 0, 26, 30, 13, 14, 26, 13, 27, 22, 70, 29, 29, 17, 16, 39, 25, 39, 47, 44, 36, 28, 28, 26, 42, 40, 20, 16, 18, 22, 17, 7, 23, 17, 0, -5, 1, 4, -11, -14, -12, -10, -18, -15, -26, -10, -20, -29, -25, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, -74, -57, -66, -86, -88, -123, -67, -3, -11, -15, -29, -16, -7, 6, 2, -3, -3, -10, 13, 4, 3, 1, -5, -5, 2, 10, -1, -2, -2, -6, -5, 1, 1, -1, -5, -4, -6, 14, -4, -10, -9, -4, -8, -29, -6, -25, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 32, 44, 38, 59, 57, 72, 38, 22, 37, 29, 33, 38, 33, 62, 48, 17, 11, 5, 3, 6, 13, 17, 16, 14, 5, 1, -4, -4, 3, 0, 11, 4, -5, 0, -13, -4, -5, 14, 6, 7, 2, -4, -4, 7, 8, 6, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, -27, -14, -4, 90, 47, -23, 34, 2, 14, 7, 51, 15, 16, -8, 31, -4, 9, 10, 4, 8, 8, -1, -3, -4, 3, 8, 0, 27, 17, 19, 2, -3, 16, -14, 24, 16, 4, -6, -7, -5, -5, -2, 26, 3, 8, 2, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -3, -5, -18, -3, -41, -28, 20, -18, -8, -17, -6, -17, -29, -38, -47, -40, -21, -11, -8, -10, -10, -22, -35, -42, -22, -16, -21, -14, -13, -24, -29, -29, -23, -33, -16, -40, -22, -24, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -2, -7, 6, 6, 31, 1, 15, -18, -23, -5, -2, -4, -1, -16, -11, -14, -17, -12, -9, -6, -16, -19, -11, 0, -5, -4, -10, -9, -2, -16, -7, 0, -6, -10, -8, -13, -2, -2, 0, 0, 0, -14, -6, -14, 0, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -3, -6, 3, 13, -11, -45, 70, -1, -14, -5, -1, -11, -10, -13, 20, 9, -1, -19, -16, -3, -14, -8, 6, -6, -13, -1, 0, -6, -8, -6, -3, 0, -17, 14, -32, -4, -6, -7, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -4, -10, -8, -3, -19, 1, -12, -26, -35, -31, -18, -8, -29, -30, -25, -15, -5, -13, -18, -13, -11, -1, -10, 0, -8, -9, -10, -7, -14, -2, -1, 0, 1, 0, 2, 0, -3, -1, 0, -1, 0, 0, 8, 3, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -34, -43, -41, -24, -11, -21, -23, 0, -2, -4, -1, 0, -3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, -1, -1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 20, -102, 45, 108, 2, 80, 45, 0, -36, -12, -22, -5, 36, -8, 51, 89, 1, 5, 25, 27, 27, 31, 39, 33, 13, 0, 17, 24, 21, 20, 0, 14, 3, 32, 14, 23, 9, -1, 5, 2, -50, 3, 4, 20, 12, 1, 17, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 10, 2, -2, -15, -62, 0, -1, -2, 36, 2, 9, 2, 2, 11, 4, -91, 25, 3, 38, 12, 22, -8, -40, -5, 10, -16, 21, 8, -4, -6, 104, -31, -4, 8, 22, 55, 22, 18, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, -20, -5, 3, -10, -9, -5, -13, 14, 27, -75, 13, -35, -58, 43, 57, 50, -34, 9, 38, 12, 26, -4, 30, 14, -35, -15, -22, 17, -14, 13, 28, 10, 11, -48, 6, 9, 0, -2, 0, 13, 2, -7, -1, 0, 7, -2, 2, 19, -37, -14, 32, 11, 18, 11, 20, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -17, -6, 2, 2, 5, 5, 6, 4, 2, -5, -3, 12, 0, -46, -12, -5, 0, 0, 0, -3, -5, -21, 0, -37, -8, -4, 5, 0, 0, 5, 1, 0, 19, -46, -23, -11, 0, 12, 13, 14, 15, 16, 16, 12, 8, 11, 13, 11, -68, -50, -30, -17, -14, -7, 0, 1, 0, 1, 14, 12, 13, 9, 26, 20, 22, 20, 33, 29, 26, 31, 26, 32, 20, 35, 48, 23, 9, 13, 0, -22, 6, 12, 12, 12, 12, 13, 22, 20, 0, 0, 112, 68, 60, 48, 34, -2, 4, 1, 2, -46, 3, -2, 0, 3, -5, 0, 0, 3, 2, -12, -4, 2, 15, 15, 10, 14, 10, -18, -53, -46, -39, -27, -11, 0, 5, 8, 7, 8, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, -15, 28, 7, 6, 0, 2, -4, -1, 5, 3, 11, 11, 8, 15, 9, -1, 17};
    memcpy(&(x[0]), data, 2666 * sizeof(int));

    assert(NUM_PARAMS == 2666);
}

void WriteParamsToFile(const vector<int>& x, const std::string& filename)
{
    ofstream ofs(filename.c_str());
    if (!ofs.good())
        return;

    for (int i = 0; i < NUM_LINES; ++i)
    {
        const Line& line = lines[i];
        ofs << line.name;
        for (int j = line.start; j < line.start + line.len; ++j)
            ofs << " " << x[j];
        ofs << endl;
    }
}

std::string ParamNumberToName(size_t n)
{
    stringstream ss;
    ss << "Param_" << n;
    return ss.str();
}

bool ReadParamsFromFile(vector<int>& x, const std::string& filename)
{
    x.resize(NUM_PARAMS);

    ifstream ifs(filename.c_str());
    if (!ifs.good())
        return false;

    string s;
    while (getline(ifs, s))
    {
        vector<string> tokens;
        Split(s, tokens, " ");
        if (tokens.size() < 2)
            continue;

        for (int i = 0; i < NUM_LINES; ++i)
        {
            const Line& line = lines[i];
            if (tokens[0] == line.name)
            {
                for (int j = 0; j < line.len; ++j)
                    x[line.start + j] = atoi(tokens[1 + j].c_str());
            }
        }
    }

#ifdef _DEBUG
    cout << "static const int data[" << NUM_PARAMS << "] = {" << endl;
    for (size_t i = 0; i < NUM_PARAMS; ++i){
        cout << x[i] << ", ";
    }
    cout << "};" << endl;
#endif
    return true;
}
