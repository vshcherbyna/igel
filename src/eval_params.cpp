/*
*  Igel - a UCI chess playing engine derived from GreKo 2018.01
*
*  Copyright (C) 2002-2018 Vladimir Medvedev <vrm@bk.ru> (GreKo author)
*  Copyright (C) 2018-2019 Volodymyr Shcherbyna <volodymyr@shcherbyna.com>
*
*  Igel is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  Igel is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with Igel.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "eval_params.h"
#include "notation.h"
#include "utils.h"

vector<int> evalWeights;
int NUM_PARAMS = 0;

Line lines[NUM_LINES] =
{
    Line("Mid_Pawn", 64),
    Line("Mid_Knight", 64),
    Line("Mid_Bishop", 64),
    Line("Mid_Rook", 64),
    Line("Mid_Queen", 64),
    Line("Mid_King", 64),
    Line("Mid_PawnPassed", 64),
    Line("Mid_PawnPassedBlocked", 64),
    Line("Mid_PawnPassedFree", 64),
    Line("Mid_PawnConnectedFree", 64),
    Line("Mid_PawnDoubled", 64),
    Line("Mid_PawnIsolated", 64),
    Line("Mid_PawnDoubledIsolated", 64),
    Line("Mid_PawnBlocked", 64),
    Line("Mid_PawnFence", 64),
    Line("Mid_PawnOnBiColor", 1),
    Line("Mid_KnightStrong", 64),
    Line("Mid_KnightForpost", 64),
    Line("Mid_KnightKingDist", 10),
    Line("Mid_KnightAndQueen", 1),
    Line("Mid_BishopStrong", 64),
    Line("Mid_BishopMobility", 14),
    Line("Mid_KnightMobility", 9),
    Line("Mid_BishopKingDist", 10),
    Line("Mid_BishopAndRook", 1),
    Line("Mid_RookMobility", 15),
    Line("Mid_QueenMobility", 28),
    Line("Mid_RookOpen", 1),
    Line("Mid_Rook7th", 1),
    Line("Mid_RookKingDist", 10),
    Line("Mid_Queen7th", 1),
    Line("Mid_QueenKingDist", 10),
    Line("Mid_KingPawnShield", 10),
    Line("Mid_KingPawnStorm", 10),
    Line("Mid_KingPassedDist", 10),
    Line("Mid_AttackKingZone", 4),
    Line("Mid_AttackStronger", 1),
    Line("Mid_AttackCenter", 1),
    Line("Mid_ConnectedRooks", 1),
    Line("Mid_BishopsPair", 1),
    Line("Mid_RooksPair", 1),
    Line("Mid_KnightsPair", 1),
    Line("Mid_Tempo", 1),

    Line("End_Pawn", 64),
    Line("End_Knight", 64),
    Line("End_Bishop", 64),
    Line("End_Rook", 64),
    Line("End_Queen", 64),
    Line("End_King", 64),
    Line("End_PawnPassed", 64),
    Line("End_PawnPassedBlocked", 64),
    Line("End_PawnPassedFree", 64),
    Line("End_PawnConnectedFree", 64),
    Line("End_PawnDoubled", 64),
    Line("End_PawnIsolated", 64),
    Line("End_PawnDoubledIsolated", 64),
    Line("End_PawnBlocked", 64),
    Line("End_PawnFence", 64),
    Line("End_PawnOnBiColor", 1),
    Line("End_KnightStrong", 64),
    Line("End_KnightForpost", 64),
    Line("End_KnightKingDist", 10),
    Line("End_KnightAndQueen", 1),
    Line("End_BishopStrong", 64),
    Line("End_BishopMobility", 14),
    Line("End_KnightMobility", 9),
    Line("End_BishopKingDist", 10),
    Line("End_BishopAndRook", 1),
    Line("End_RookMobility", 15),
    Line("End_QueenMobility", 28),
    Line("End_RookOpen", 1),
    Line("End_Rook7th", 1),
    Line("End_RookKingDist", 10),
    Line("End_Queen7th", 1),
    Line("End_QueenKingDist", 10),
    Line("End_KingPawnShield", 10),
    Line("End_KingPawnStorm", 10),
    Line("End_KingPassedDist", 10),
    Line("End_AttackKingZone", 4),
    Line("End_AttackStronger", 1),
    Line("End_AttackCenter", 1),
    Line("End_ConnectedRooks", 1),
    Line("End_BishopsPair", 1),
    Line("End_RooksPair", 1),
    Line("End_KnightsPair", 1),
    Line("End_Tempo", 1)
};

void InitParamLines()
{
    for (int i = 1; i < NUM_LINES; ++i)
        lines[i].start = lines[i - 1].start + lines[i - 1].len;
    NUM_PARAMS = lines[NUM_LINES - 1].start + lines[NUM_LINES - 1].len;
}

void SetMaterialOnlyValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);
}

void SetDefaultValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);

    static const int data[2610] = {0, 0, 0, 0, 0, 0, 0, 0, 80, 45, 40, 197, 157, 247, 105, -31, -15, -13, 22, -9, 61, 91, 32, -16, -2, 0, -3, 20, 17, 1, 2, -2, -7, -10, -2, 12, 14, 11, -13, -17, -8, -5, -3, -4, 6, 5, 16, -5, -11, -3, -15, -7, -8, 15, 23, -17, 0, 0, 0, 0, 0, 0, 0, 0, -185, -98, -59, -47, 10, -94, -67, -110, -90, -54, 31, -7, 10, 19, 6, -21, -65, 16, -12, 25, 41, 114, 37, 35, 3, 22, 11, 40, 29, 64, 23, 26, 5, 21, 19, 18, 22, 22, 33, 7, -10, 13, 22, 35, 45, 35, 47, 7, -8, -22, 10, 26, 24, 31, 21, 7, -78, -5, -15, -1, 24, 11, 5, 9, -39, -16, -126, -70, -30, -66, -38, 7, -46, -21, -36, -54, -19, 28, -27, -71, -7, 9, 23, 15, 15, 52, 27, 18, -5, 18, 12, 46, 36, 38, 31, -2, -1, 7, 15, 35, 38, 19, 17, 26, 9, 21, 29, 27, 30, 44, 36, 23, 13, 30, 23, 16, 25, 37, 45, 21, -15, 9, 8, 7, 21, 1, -27, -6, 27, 45, 32, 64, 45, 1, 11, 6, 18, 36, 68, 68, 60, 72, 30, 39, 1, 32, 34, 41, 29, 47, 70, 9, -16, -5, 10, 36, 18, 32, -3, -6, -18, -21, -1, 6, 14, -1, 22, -11, -25, -17, -2, -2, 9, 14, 8, -22, -30, -11, -11, 8, 16, 20, 7, -62, -11, -3, 8, 20, 21, 19, -20, -5, -21, 8, 23, -5, 50, 43, 24, 48, -6, -16, -6, 5, -59, 28, -2, 48, -11, -11, -16, -47, -11, 23, -2, 3, -34, -30, -31, -30, -29, -16, -26, -23, -6, -28, -18, -19, -17, -18, -12, -10, -4, 9, -7, -12, -4, 3, 13, 6, -18, 4, 12, 10, 14, 21, 0, 17, 19, 5, 15, 20, 8, 3, -12, -54, -33, 36, 64, 21, -6, -7, 15, 6, 41, 95, 37, 43, 12, 80, 24, -21, 53, 69, 118, 77, 61, 181, 199, 5, 5, 63, 101, 51, 22, 43, 51, -16, -49, 13, 6, -31, -46, -9, -23, -62, -1, 1, -8, -14, -27, -26, 7, -24, -17, 11, -8, -53, -38, -19, 10, 18, -44, 25, 2, -79, -17, -51, 4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 163, 124, 87, -27, 22, 63, 52, 266, 71, 42, 10, 25, 27, 9, 46, 20, 21, 19, 20, 8, 30, 80, 20, 5, 2, -2, -14, -10, -6, 3, 6, 11, -17, -14, -16, -19, -10, 23, -8, 8, -9, -5, -3, -28, -32, -13, -1, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 3, -4, -29, -5, -6, -22, -202, -35, -3, 43, 19, -29, 63, -6, 5, 9, -23, -4, -3, 7, -42, 30, 21, 4, -20, -24, -7, 15, 46, -4, 2, -3, 10, 11, -8, 6, 19, 8, 16, -13, -10, -16, -9, 40, 4, 24, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, -19, 21, 36, -17, -46, -44, 63, 34, 39, 1, 44, -7, 30, -8, 60, -26, -1, -9, 1, -11, -25, 12, 8, -29, -2, 2, -2, -1, -11, -4, -1, -2, -18, -4, -13, -8, -9, -6, -17, -6, 7, 7, 2, 6, 11, -14, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 18, -9, 31, 159, -33, 31, 67, 21, 82, 71, 52, 52, 182, 197, 76, 60, 55, 34, 39, 66, 25, 30, 129, 7, -3, -39, -8, -14, 18, 15, -3, -3, 1, 12, 62, 2, -11, -17, -40, -21, 8, -3, -4, -14, 23, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -12, -120, -6, -12, -18, -9, -47, -33, -36, -5, 16, -20, -4, 65, -65, -32, 23, 1, -14, -7, 4, 30, -40, -39, 18, -15, -6, 2, 0, 26, -25, -57, -17, -9, 20, -31, 3, 3, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 42, 2, -2, -27, 3, -14, -1, 0, 8, 0, 4, 7, -1, 20, 2, 17, -3, -10, -24, -39, 0, 14, 3, 3, -4, -18, -32, -34, -29, -2, 1, -3, -11, -25, -28, -31, -22, -32, -15, -3, -15, 2, -21, -17, -13, -23, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -50, 8, -49, -18, -2, -45, 11, 21, 9, -3, 16, -8, 16, 8, 68, -18, -36, -10, 6, 2, 4, -10, 20, 6, -22, -7, 0, 2, 6, -23, 5, 7, -1, 5, -6, 69, -3, 3, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 17, -2, 6, 8, 8, 16, 8, 24, -11, 4, 17, -27, -32, 1, -9, 2, -3, -15, -8, -4, -27, -14, -3, -5, -8, -7, -14, -6, -4, 14, -2, -2, -5, 1, 0, -6, -5, 0, -7, 1, -9, -36, -22, -12, -11, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -6, -18, -38, -100, -7, 11, 9, -3, -9, -5, -12, -1, -3, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 2, 1, 2, -1, -2, 1, 2, 3, 3, -6, 4, 2, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -3, 40, 12, 44, 6, 3, 76, 5, 0, -26, 9, -18, 1, 10, 52, -33, 3, 146, 61, 46, 19, 68, 25, 16, 44, 15, 17, 37, 40, 37, 60, 96, 47, 28, 12, 34, 36, 29, 65, 21, 33, 13, 5, 12, -13, 8, -7, -33, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 1, 0, 2, 0, 2, -17, -4, 0, 12, -5, -2, -9, 39, -73, 3, 10, 8, 136, 178, -49, 49, -2, -37, -60, -10, 24, -29, -3, -20, 14, 8, -20, 36, -55, 20, 25, 29, 108, -42, -33, 16, 15, 30, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 48, 16, 24, 11, 12, 3, 10, -26, 37, 5, 10, 15, 30, 88, 16, 16, 4, 98, 13, 78, 64, 32, 66, 11, 59, 49, 96, -7, 29, 41, 27, 66, -38, 26, 24, 17, 32, 58, 70, 50, -16, 18, 46, 44, 48, 80, 24, 8, 103, 75, 10, 41, 33, 15, 7, 20, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -7, 2, 10, 16, 18, 17, 14, 17, 18, 41, 31, 12, 22, -33, -17, -6, 0, 5, 11, 16, 20, 32, 0, 42, 23, 2, 9, 11, 12, 13, 20, 23, 39, -12, -7, -3, 0, -3, 1, 4, 12, 15, 28, 38, 58, 56, 46, 39, -21, -17, -10, -7, -2, -2, 1, 3, 8, 10, 13, 16, 27, 36, 26, 56, 48, 52, 58, 64, 66, 78, 72, 69, 35, 26, 115, 39, 31, -7, 0, 39, 24, 7, 3, 5, 0, -3, -7, 5, -24, 0, 684, 93, 39, 28, 20, 15, 0, -3, -18, 44, 37, 23, 19, 6, -1, -7, -20, -17, -49, 8, 7, -8, -23, -44, -38, -89, -73, -1, -4, -84, -38, -13, -11, -1, -10, -5, -10, 12, 9, -13, -10, 29, 133, 76, 0, 1, 56, 28, 60, 34, 0, 0, 0, 0, 0, 0, 0, 0, 163, 166, 159, 118, 118, 88, 155, 146, 83, 112, 91, 66, 49, 47, 79, 80, 30, 26, 25, 17, 13, 16, 20, 21, 0, 13, -1, 0, -3, -3, 10, -5, -6, 6, -4, -3, 3, -6, -5, -16, 2, 3, 10, 0, 20, -3, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0, -22, -18, 2, -11, -16, -17, -43, -71, 2, 13, -12, 18, -1, -3, -15, -38, -2, 0, 31, 23, 9, -8, -15, -37, 1, 17, 38, 29, 29, 19, 14, -10, 3, 3, 31, 33, 33, 25, 12, -3, 1, 10, 11, 26, 18, 8, -12, -5, -19, -9, 6, 5, 8, -7, -11, -26, -5, -19, -6, 8, -13, -7, -25, -48, -10, -17, 5, -1, -3, 3, -12, -26, 4, -1, 8, -2, 3, -9, 5, 1, -5, 0, -4, 2, -3, -7, -9, -2, 1, -3, 7, 7, 11, -2, -12, -1, -8, -3, 7, 10, 0, 5, -9, -19, -16, -6, 3, 5, 11, -6, -6, -17, -19, -27, -14, -8, -3, -13, -23, -35, -17, -13, -12, -9, -8, -6, -2, -22, 33, 24, 30, 19, 27, 40, 35, 41, 24, 23, 16, 13, 10, 15, 30, 23, 32, 29, 25, 22, 23, 19, 16, 23, 37, 32, 38, 23, 26, 25, 30, 32, 32, 31, 28, 24, 18, 22, 12, 24, 25, 22, 16, 20, 11, 7, 18, 14, 25, 15, 24, 17, 7, 4, 11, 35, 13, 15, 15, 5, 4, 4, 21, 1, 21, 32, 21, 7, -19, 10, 9, 20, 36, 37, 33, 6, 29, -7, 29, 18, 20, 16, -6, 32, 5, -21, 7, 8, 59, 51, 8, 4, 2, -2, 50, 27, 34, 46, 12, 30, -2, -2, 14, 22, 45, 5, 36, -4, -6, 13, 24, 23, 32, 15, 15, 4, 0, 6, 1, 12, 11, 18, 31, -14, 27, 16, 34, 21, -78, -31, -22, -17, 0, 19, 10, -10, -14, 4, 14, 17, 19, 24, 17, 14, -4, 9, 3, 4, 9, 18, 8, 9, -15, 4, 4, 15, 18, 20, 13, -1, -10, -5, 18, 26, 31, 20, 10, -4, -18, -1, 11, 20, 24, 21, 8, -5, -11, -5, 13, 23, 23, 15, 2, -13, -36, -28, -8, 15, -14, 7, -19, -41, 0, 0, 0, 0, 0, 0, 0, 0, 23, 31, 14, 13, 28, 12, 25, 20, 62, 28, 26, 15, 16, 41, 18, 36, 45, 45, 43, 32, 32, 24, 43, 41, 23, 16, 19, 24, 26, 11, 27, 18, -3, 0, 1, 5, -7, -17, -13, -12, -17, -16, -26, -12, -22, -31, -21, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -80, -63, -65, -87, -90, -125, -71, -4, -5, -16, -28, -13, -5, 24, 4, 1, -1, -3, 15, 5, 10, 5, -2, -10, 11, 10, 1, -9, -4, -7, -3, 1, -2, -4, -10, -6, -8, 15, -2, -10, -11, -5, -6, -33, -9, -31, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 30, 52, 44, 58, 61, 80, 41, 31, 47, 35, 39, 44, 37, 77, 56, 25, 17, 3, 4, 8, 19, 26, 23, 17, 11, 3, -5, -6, 5, -3, 14, 11, -2, 2, -20, -5, 1, 20, 16, 13, 4, -5, -7, 8, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, -25, -12, -21, 103, 63, -53, 30, -1, 15, 8, 51, 16, 23, -4, 35, -4, 10, 12, 5, 9, 15, 0, -1, -9, 2, 15, 0, 27, 20, 20, 5, 0, 15, -13, 21, 16, 2, -1, -2, -5, -8, -3, 26, -6, 4, 9, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, -7, -20, -3, -47, -33, 10, -25, -5, -20, -18, -15, -28, -42, -53, -41, -22, -10, 0, -8, -10, -27, -30, -38, -21, -17, -19, -16, -16, -30, -29, -27, -20, -37, -14, -41, -24, -23, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, -6, -11, 4, 1, 37, -1, 11, -20, -26, -8, -3, -2, 2, -17, -8, -11, -18, -12, -9, -6, -14, -18, -9, 0, -9, -5, -11, -8, -2, -16, -6, -2, -10, -12, -9, -15, -4, -5, -2, -1, 0, -17, -6, -17, -2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 3, -12, 2, 18, -10, -40, 72, -4, -21, -4, -3, -19, -9, -17, 22, 10, 2, -20, -23, -4, -19, -8, 6, -4, -11, -2, -4, -5, -14, -3, -5, 1, -17, 15, -32, -1, -8, -3, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -17, -16, -7, -6, -23, 4, -13, -30, -38, -32, -15, -9, -29, -30, -30, -16, -6, -19, -18, -13, -12, -2, -12, -3, -9, -9, -12, -10, -14, -4, -5, 0, -4, -2, 0, -1, -4, -2, 1, -4, -1, -1, 9, 1, -2, -6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, -44, -45, -41, -21, -14, -19, -25, -1, -4, -5, -8, -1, -3, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, -1, 1, 5, 8, 0, 0, 6, 2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, -7, 36, -107, 75, 110, 0, 113, 49, 58, -44, -16, -23, -4, 44, -23, 42, 104, -19, 3, 23, 29, 29, 30, 41, 30, 12, 1, 19, 24, 24, 18, -2, 14, 6, 27, 14, 22, 8, -5, 3, 3, -53, 7, 5, 23, 10, 5, 25, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, -7, -1, 1, 0, 0, 0, 1, 31, -108, -7, -15, -70, -12, -3, -8, 59, 4, 12, 0, -2, 7, 12, -116, 31, 8, 55, 20, 32, -9, -48, -4, 29, -29, 24, 11, 7, -8, 120, -48, -6, 18, 42, 67, 25, 33, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -22, -6, 2, -3, -8, -2, -12, 13, 17, -81, 17, -36, -63, 37, 39, 73, -268, -17, 43, 15, 29, 2, 27, 18, -45, -29, -28, 19, -16, 14, 31, 5, 23, -44, 9, 11, 1, -5, -4, 16, 4, -7, -2, 0, 8, -9, 4, 22, -39, -17, 29, 8, 17, 10, 19, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -23, -7, 1, 1, 5, 5, 7, 6, 3, -6, -2, 12, 1, -50, -11, -1, 2, 1, 1, -2, -5, -22, 0, -40, -8, 0, 4, 0, 0, 6, 1, -2, 13, -46, -21, -4, 5, 14, 17, 18, 17, 19, 17, 15, 9, 13, 12, 10, -76, -56, -32, -16, -13, -3, 2, 12, 5, 14, 19, 21, 14, 15, 31, 21, 20, 20, 33, 29, 30, 34, 27, 32, 29, 34, 49, 27, 6, 14, 0, -21, 11, 15, 16, 17, 15, 19, 25, 21, 3, 0, 122, 67, 66, 49, 34, -1, 8, 5, 2, -44, -2, -5, -5, 1, -4, 1, 3, 7, 3, -13, -5, 4, 17, 21, 12, 18, 24, -19, -192, -29, -27, -17, -1, 8, 17, 17, 19, 11, 6, 0, 1, 0, -5, 12, 13, 5, 15, 0, -24, 19};
    memcpy(&(x[0]), data, 2610 * sizeof(int));
    assert(NUM_PARAMS == 2610);
}

void WriteParamsToFile(const vector<int>& x, const std::string& filename)
{
    ofstream ofs(filename.c_str());
    if (!ofs.good())
        return;

    for (int i = 0; i < NUM_LINES; ++i)
    {
        const Line& line = lines[i];
        ofs << line.name;
        for (int j = line.start; j < line.start + line.len; ++j)
            ofs << " " << x[j];
        ofs << endl;
    }
}

std::string ParamNumberToName(size_t n)
{
    stringstream ss;
    ss << "Param_" << n;
    return ss.str();
}

bool ReadParamsFromFile(vector<int>& x, const std::string& filename)
{
    x.resize(NUM_PARAMS);

    ifstream ifs(filename.c_str());
    if (!ifs.good())
        return false;

    string s;
    while (getline(ifs, s))
    {
        vector<string> tokens;
        Split(s, tokens, " ");
        if (tokens.size() < 2)
            continue;

        for (int i = 0; i < NUM_LINES; ++i)
        {
            const Line& line = lines[i];
            if (tokens[0] == line.name)
            {
                for (int j = 0; j < line.len; ++j)
                    x[line.start + j] = atoi(tokens[1 + j].c_str());
            }
        }
    }

#ifdef _DEBUG
    cout << "static const int data[" << NUM_PARAMS << "] = {" << endl;
    for (size_t i = 0; i < NUM_PARAMS; ++i){
        cout << x[i] << ", ";
    }
    cout << "};" << endl;
#endif
    return true;
}
