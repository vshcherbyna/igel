/*
*  Igel - a UCI chess playing engine derived from GreKo 2018.01
*
*  Copyright (C) 2002-2018 Vladimir Medvedev <vrm@bk.ru> (GreKo author)
*  Copyright (C) 2018-2019 Volodymyr Shcherbyna <volodymyr@shcherbyna.com>
*
*  Igel is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  Igel is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with Igel.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "eval_params.h"
#include "notation.h"
#include "utils.h"

vector<int> evalWeights;
int NUM_PARAMS = 0;

Line lines[NUM_LINES] =
{
    Line("Mid_Pawn", 64),
    Line("Mid_Knight", 64),
    Line("Mid_Bishop", 64),
    Line("Mid_Rook", 64),
    Line("Mid_Queen", 64),
    Line("Mid_King", 64),
    Line("Mid_PawnPassed", 64),
    Line("Mid_PawnPassedBlocked", 64),
    Line("Mid_PawnPassedFree", 64),
    Line("Mid_PawnConnectedFree", 64),
    Line("Mid_PawnDoubled", 64),
    Line("Mid_PawnIsolated", 64),
    Line("Mid_PawnDoubledIsolated", 64),
    Line("Mid_PawnBlocked", 64),
    Line("Mid_PawnFence", 64),
    Line("Mid_PawnOnBiColor", 1),
    Line("Mid_KnightStrong", 64),
    Line("Mid_KnightForpost", 64),
    Line("Mid_KnightKingDist", 10),
    Line("Mid_KnightAndQueen", 1),
    Line("Mid_BishopStrong", 64),
    Line("Mid_BishopMobility", 14),
    Line("Mid_KnightMobility", 9),
    Line("Mid_BishopKingDist", 10),
    Line("Mid_BishopAndRook", 1),
    Line("Mid_RookMobility", 15),
    Line("Mid_QueenMobility", 28),
    Line("Mid_RookOpen", 1),
    Line("Mid_Rook7th", 1),
    Line("Mid_RookKingDist", 10),
    Line("Mid_Queen7th", 1),
    Line("Mid_QueenKingDist", 10),
    Line("Mid_KingPawnShield", 10),
    Line("Mid_KingPawnStorm", 10),
    Line("Mid_KingPassedDist", 10),
    Line("Mid_AttackKingZone", 4),
    Line("Mid_AttackStronger", 1),
    Line("Mid_AttackCenter", 1),
    Line("Mid_ConnectedRooks", 1),
    Line("Mid_BishopsPair", 1),
    Line("Mid_RooksPair", 1),
    Line("Mid_KnightsPair", 1),
    Line("Mid_Tempo", 1),

    Line("End_Pawn", 64),
    Line("End_Knight", 64),
    Line("End_Bishop", 64),
    Line("End_Rook", 64),
    Line("End_Queen", 64),
    Line("End_King", 64),
    Line("End_PawnPassed", 64),
    Line("End_PawnPassedBlocked", 64),
    Line("End_PawnPassedFree", 64),
    Line("End_PawnConnectedFree", 64),
    Line("End_PawnDoubled", 64),
    Line("End_PawnIsolated", 64),
    Line("End_PawnDoubledIsolated", 64),
    Line("End_PawnBlocked", 64),
    Line("End_PawnFence", 64),
    Line("End_PawnOnBiColor", 1),
    Line("End_KnightStrong", 64),
    Line("End_KnightForpost", 64),
    Line("End_KnightKingDist", 10),
    Line("End_KnightAndQueen", 1),
    Line("End_BishopStrong", 64),
    Line("End_BishopMobility", 14),
    Line("End_KnightMobility", 9),
    Line("End_BishopKingDist", 10),
    Line("End_BishopAndRook", 1),
    Line("End_RookMobility", 15),
    Line("End_QueenMobility", 28),
    Line("End_RookOpen", 1),
    Line("End_Rook7th", 1),
    Line("End_RookKingDist", 10),
    Line("End_Queen7th", 1),
    Line("End_QueenKingDist", 10),
    Line("End_KingPawnShield", 10),
    Line("End_KingPawnStorm", 10),
    Line("End_KingPassedDist", 10),
    Line("End_AttackKingZone", 4),
    Line("End_AttackStronger", 1),
    Line("End_AttackCenter", 1),
    Line("End_ConnectedRooks", 1),
    Line("End_BishopsPair", 1),
    Line("End_RooksPair", 1),
    Line("End_KnightsPair", 1),
    Line("End_Tempo", 1)
};

void InitParamLines()
{
    for (int i = 1; i < NUM_LINES; ++i)
        lines[i].start = lines[i - 1].start + lines[i - 1].len;
    NUM_PARAMS = lines[NUM_LINES - 1].start + lines[NUM_LINES - 1].len;
}

void SetMaterialOnlyValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);
}

void SetDefaultValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);

    static const int data[2610] = {0, 0, 0, 0, 0, 0, 0, 0, 86, 54, 42, 205, 163, 249, 110, -24, -11, -12, 25, -5, 69, 96, 33, -17, -1, 5, -4, 26, 16, 1, -3, -4, -7, -11, 1, 16, 17, 6, -18, -20, -3, -7, -1, -6, 5, 1, 17, -3, -12, 2, -17, -8, -12, 19, 27, -14, 0, 0, 0, 0, 0, 0, 0, 0, -188, -102, -57, -48, 9, -96, -74, -114, -96, -57, 41, -5, 13, 19, 10, -19, -70, 18, -4, 33, 50, 117, 40, 35, 1, 24, 11, 46, 36, 71, 26, 21, 2, 19, 15, 16, 24, 21, 38, 2, -16, 10, 24, 34, 47, 36, 48, 1, -11, -31, 9, 25, 25, 34, 17, 3, -85, -6, -24, -5, 24, 4, 0, 6, -41, -14, -130, -70, -24, -62, -32, 9, -48, -16, -32, -55, -10, 36, -22, -75, -11, 14, 28, 21, 22, 57, 37, 16, -5, 16, 13, 50, 42, 44, 28, 3, -7, 11, 17, 38, 41, 17, 12, 25, 8, 18, 32, 24, 29, 46, 33, 17, 11, 33, 19, 19, 21, 39, 48, 19, -20, 6, 5, 2, 16, -4, -31, -13, 33, 51, 35, 72, 50, 1, 14, 4, 22, 43, 74, 74, 62, 76, 30, 38, 2, 38, 41, 47, 30, 54, 69, 8, -16, -6, 16, 42, 21, 37, -2, -6, -21, -16, 5, 10, 17, 1, 21, -13, -28, -16, 1, -3, 12, 20, 3, -27, -35, -8, -13, 4, 18, 23, 2, -71, -9, -4, 11, 22, 24, 24, -27, -10, -17, 11, 26, 1, 52, 47, 29, 53, -15, -21, -3, 10, -59, 35, 6, 52, -13, -15, -15, -47, -5, 30, 7, 11, -40, -31, -35, -35, -26, -11, -23, -23, -11, -31, -20, -24, -16, -16, -11, -12, -10, 5, -12, -12, -7, -1, 9, 11, -24, -3, 11, 6, 15, 23, -6, 11, 14, -1, 8, 22, 2, -6, -17, -60, -27, 28, 57, 17, -2, -4, 13, 5, 34, 89, 38, 42, 7, 80, 24, -20, 53, 65, 116, 77, 57, 189, 205, 5, 7, 69, 106, 51, 22, 53, 60, -10, -47, 11, 6, -27, -42, 1, -16, -57, 3, 2, -5, -6, -22, -22, 12, -22, -25, 9, -12, -56, -39, -15, 10, 13, -49, 21, 1, -85, -16, -54, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 168, 130, 94, -22, 28, 67, 60, 274, 74, 44, 13, 28, 33, 15, 47, 19, 21, 20, 20, 10, 35, 85, 29, 4, 0, -2, -19, -12, -4, 8, 7, 13, -22, -16, -16, -21, -7, 28, -6, 11, -11, -4, -2, -30, -32, -11, 1, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, -7, -26, -8, -7, -24, -206, -39, -9, 41, 21, -21, 61, -12, 4, 13, -29, -6, 2, 11, -38, 24, 23, 6, -21, -27, -3, 16, 50, 2, 8, -6, 5, 11, -11, 8, 23, 5, 20, -17, -17, -12, -13, 34, 6, 25, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, -12, 27, 43, -9, -38, -39, 73, 40, 45, 6, 53, 0, 36, -3, 63, -25, 3, -8, 5, -11, -19, 17, 9, -29, -3, 1, -1, -1, -5, -1, -2, -3, -20, -4, -11, -8, -6, -1, -19, -7, 9, 8, 0, 7, 11, -9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 14, -8, 20, 159, -36, 23, 65, 27, 84, 66, 53, 48, 182, 195, 77, 55, 56, 38, 38, 64, 28, 27, 129, 4, -3, -38, -2, -14, 17, 15, -6, -3, -1, 12, 57, 2, -8, -13, -39, -19, 9, 0, -1, -18, 23, -3, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -17, -123, -9, -10, -15, -3, -44, -31, -39, -8, 15, -20, -3, 66, -68, -30, 28, 5, -8, -2, 9, 37, -44, -40, 21, -14, -6, 2, 2, 31, -26, -58, -19, -14, 21, -35, 3, 4, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 49, 1, 3, -22, 10, -13, -2, 1, 6, 1, 4, 9, -1, 17, 2, 19, -5, -10, -25, -42, -3, 10, 0, 0, -4, -17, -32, -38, -32, -4, 0, 0, -9, -25, -31, -29, -23, -29, -15, -4, -12, 3, -23, -14, -16, -19, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -44, 5, -47, -19, 2, -44, 8, 17, 4, -1, 20, -6, 12, 4, 63, -18, -35, -10, -1, -3, 4, -14, 15, 8, -21, -4, -6, 6, 7, -21, 5, 2, -3, 4, -5, 68, -6, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 13, 2, 5, 10, 9, 11, 7, 24, -10, 2, 19, -23, -31, -2, -6, 2, -1, -12, -8, -7, -29, -13, 1, -5, -9, -4, -10, -6, -6, 14, -5, 0, -3, 0, 2, -5, -3, -1, -6, 0, -10, -41, -23, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -15, -42, -101, -6, 14, 9, 0, -8, -3, -11, 0, -5, -4, -2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 2, -1, -6, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 31, 6, 41, 3, 0, 69, 0, 0, -24, 4, -21, -2, 10, 42, -31, 6, 146, 63, 45, 18, 70, 32, 21, 43, 13, 18, 36, 39, 38, 61, 101, 49, 30, 10, 38, 43, 29, 68, 14, 36, 13, 6, 15, -7, 13, -3, -28, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -18, -3, 0, 11, -4, 0, -1, 34, -70, 8, 6, 4, 130, 165, -49, 40, 4, -40, -59, -11, 23, -28, -4, -21, 5, 11, -20, 37, -53, 13, 32, 31, 96, -45, -30, 14, 17, 18, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 16, 27, 11, 13, 2, 9, -29, 34, 1, 9, 10, 23, 78, 11, 16, 0, 92, 9, 76, 61, 26, 66, 11, 55, 45, 95, -6, 25, 41, 31, 64, -33, 17, 24, 20, 37, 59, 73, 50, -11, 13, 45, 48, 50, 84, 24, 7, 106, 74, 9, 43, 40, 20, 9, 24, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -8, 1, 8, 15, 16, 18, 15, 20, 20, 44, 33, 14, 16, -36, -17, -6, -3, 6, 13, 13, 20, 32, 0, 42, 20, 4, 10, 13, 14, 12, 18, 23, 39, -13, -9, -5, -2, -3, 2, 6, 14, 17, 30, 41, 61, 58, 47, 41, -22, -19, -15, -12, -5, -4, -1, -1, 5, 11, 10, 19, 27, 38, 28, 57, 47, 51, 60, 62, 65, 79, 68, 72, 33, 28, 114, 34, 33, -2, 0, 33, 23, 9, 5, 3, 2, -3, -4, 1, -22, 0, 677, 93, 34, 23, 16, 15, -3, -1, -22, 43, 34, 20, 17, 7, -1, -4, -17, -15, -46, 7, 5, -4, -24, -42, -36, -87, -69, -4, 0, -85, -45, -17, -15, 3, -8, 1, -3, 14, 6, -13, -12, 32, 139, 82, 1, 3, 57, 32, 67, 37, 0, 0, 0, 0, 0, 0, 0, 0, 167, 170, 165, 123, 123, 92, 159, 151, 88, 118, 95, 70, 53, 49, 82, 84, 32, 26, 26, 16, 13, 16, 24, 23, 6, 15, 1, 0, -2, -2, 11, 0, -5, 8, -4, 0, 5, -4, -4, -15, 7, 4, 12, 5, 17, -3, -4, -15, 0, 0, 0, 0, 0, 0, 0, 0, -23, -21, -1, -15, -17, -18, -46, -68, -1, 9, -14, 17, 2, -7, -17, -44, -4, -3, 28, 19, 7, -5, -14, -37, -4, 14, 36, 31, 29, 18, 10, -11, 0, 2, 29, 31, 31, 26, 14, -4, -1, 11, 11, 27, 17, 8, -13, -6, -22, -7, 3, 2, 9, -9, -13, -28, -10, -22, -8, 5, -10, -8, -28, -49, -11, -19, 1, -4, -7, 0, -12, -23, 1, 0, 6, -5, 5, -7, 7, 0, -6, -2, -3, 1, -2, -2, -6, -4, -1, -3, 9, 9, 14, 0, -11, -4, -11, -3, 7, 11, 2, 7, -9, -18, -12, -8, 4, 3, 10, -8, -7, -19, -20, -25, -13, -7, -1, -12, -23, -38, -21, -13, -12, -7, -9, -8, -4, -21, 37, 25, 27, 18, 28, 39, 33, 38, 26, 20, 13, 11, 8, 17, 30, 23, 31, 26, 24, 23, 22, 19, 17, 22, 36, 31, 38, 22, 30, 27, 27, 31, 31, 33, 29, 23, 16, 21, 14, 22, 21, 24, 14, 20, 10, 7, 16, 13, 23, 15, 22, 19, 4, 3, 8, 34, 13, 17, 15, 7, 6, 2, 19, -1, 17, 31, 20, 8, -16, 13, 10, 22, 31, 34, 29, 6, 23, -7, 27, 19, 17, 16, -7, 29, 6, -18, 5, 7, 54, 46, 6, 8, 7, 1, 50, 25, 30, 43, 10, 33, 0, 0, 13, 19, 43, 1, 34, -3, -3, 10, 21, 22, 27, 12, 15, 2, 0, 5, -5, 9, 10, 15, 27, -18, 23, 11, 28, 16, -78, -29, -22, -14, 1, 23, 15, -7, -11, 5, 14, 19, 22, 26, 20, 13, -1, 9, 4, 3, 11, 21, 10, 8, -16, 4, 4, 15, 17, 21, 15, -3, -14, -5, 18, 27, 30, 21, 9, -4, -17, 1, 16, 22, 27, 23, 10, -6, -13, -5, 15, 25, 27, 18, 4, -13, -39, -30, -13, 12, -13, 7, -17, -45, 0, 0, 0, 0, 0, 0, 0, 0, 27, 35, 19, 17, 31, 15, 29, 25, 68, 29, 30, 18, 20, 42, 22, 40, 47, 45, 42, 30, 31, 24, 41, 42, 22, 16, 18, 21, 23, 11, 25, 18, -3, -1, 2, 9, -8, -17, -11, -13, -16, -15, -26, -12, -18, -29, -21, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, -75, -66, -66, -84, -89, -128, -67, -2, -8, -17, -32, -13, -5, 19, 3, 0, -2, -7, 14, 3, 8, 4, -5, -6, 5, 10, -2, -6, -5, -5, -6, 1, -3, -6, -11, -7, -9, 11, -2, -12, -13, -5, -9, -33, -10, -35, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 33, 53, 48, 63, 64, 82, 45, 28, 47, 34, 41, 48, 37, 75, 56, 23, 15, 3, 5, 6, 18, 28, 21, 14, 8, 3, -4, -6, 3, -2, 12, 7, -4, 1, -18, -5, -2, 17, 14, 10, 1, -3, -5, 10, 9, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, -28, -15, -20, 103, 57, -54, 33, 4, 16, 8, 51, 14, 24, -5, 35, -6, 10, 16, 4, 5, 14, -4, -3, -8, 2, 12, 1, 26, 16, 21, 3, -3, 17, -14, 26, 18, 1, -5, -6, -7, -6, 0, 27, -2, 4, 8, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, -8, -16, -2, -42, -29, 14, -21, -6, -17, -13, -14, -28, -40, -57, -44, -21, -10, 0, -7, -10, -24, -35, -41, -19, -16, -21, -14, -13, -24, -28, -28, -22, -37, -14, -41, -22, -24, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -9, 6, 5, 40, 3, 14, -18, -24, -5, -2, -4, -1, -19, -9, -14, -17, -12, -9, -6, -16, -19, -11, 0, -9, -4, -10, -9, -3, -19, -7, 0, -8, -10, -8, -13, -2, -5, 0, 0, 0, -14, -6, -16, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 2, -9, 5, 20, -13, -45, 70, -4, -20, -6, -1, -15, -11, -17, 19, 9, -1, -21, -23, -4, -15, -9, 6, -6, -13, -3, -3, -6, -10, -6, -5, 0, -18, 17, -34, -1, -6, -6, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -16, -14, -9, -2, -20, 1, -12, -26, -36, -31, -18, -11, -29, -30, -25, -15, -5, -18, -18, -13, -11, -1, -10, 0, -7, -11, -10, -7, -15, -2, -2, 0, -1, 0, 2, 0, -3, -1, 0, -1, -1, 0, 9, 2, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -42, -43, -43, -25, -13, -20, -25, 0, -2, -4, -7, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, -1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 29, -104, 65, 110, -1, 108, 44, 47, -46, -15, -22, -6, 41, -24, 47, 104, -15, 4, 25, 31, 30, 30, 41, 33, 14, 2, 17, 23, 23, 19, 0, 15, 5, 29, 14, 23, 8, -3, 6, 2, -52, 5, 4, 22, 12, 3, 24, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 28, -100, -7, -19, -66, -2, 0, -3, 56, 3, 12, -1, -6, 9, 7, -108, 28, 7, 51, 18, 31, -11, -41, -6, 22, -23, 24, 10, -2, -8, 116, -45, -1, 14, 37, 66, 27, 26, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, -20, -5, 3, -4, -9, -5, -13, 14, 21, -74, 16, -32, -65, 42, 44, 70, -268, -13, 43, 16, 30, -1, 32, 18, -40, -28, -28, 20, -16, 15, 31, 8, 20, -45, 6, 12, 1, -2, -1, 18, 1, -6, 0, 1, 11, -6, 2, 21, -39, -15, 32, 12, 18, 12, 22, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -23, -6, 2, 2, 5, 5, 6, 7, 2, -5, -3, 13, 0, -49, -12, -2, 0, 0, 0, -3, -5, -23, 0, -43, -8, -1, 5, 0, 0, 5, 1, -1, 19, -47, -23, -7, 3, 12, 16, 17, 18, 20, 19, 15, 11, 14, 13, 12, -75, -51, -31, -17, -14, -5, 0, 9, 2, 10, 18, 19, 13, 15, 31, 21, 22, 20, 35, 29, 31, 35, 30, 34, 26, 31, 50, 23, 9, 13, 0, -23, 11, 14, 14, 16, 14, 17, 24, 19, 0, 0, 118, 68, 65, 48, 34, -2, 5, 1, 2, -46, 3, -3, -2, 3, -5, 0, 0, 6, 3, -14, -4, 5, 18, 21, 12, 18, 21, -19, -180, -30, -27, -18, 1, 9, 18, 17, 17, 10, 3, -4, -2, 4, 0, 14, 13, 7, 18, 6, -20, 20};
    memcpy(&(x[0]), data, 2610 * sizeof(int));
    assert(NUM_PARAMS == 2610);
}

void WriteParamsToFile(const vector<int>& x, const std::string& filename)
{
    ofstream ofs(filename.c_str());
    if (!ofs.good())
        return;

    for (int i = 0; i < NUM_LINES; ++i)
    {
        const Line& line = lines[i];
        ofs << line.name;
        for (int j = line.start; j < line.start + line.len; ++j)
            ofs << " " << x[j];
        ofs << endl;
    }
}

std::string ParamNumberToName(size_t n)
{
    stringstream ss;
    ss << "Param_" << n;
    return ss.str();
}

bool ReadParamsFromFile(vector<int>& x, const std::string& filename)
{
    x.resize(NUM_PARAMS);

    ifstream ifs(filename.c_str());
    if (!ifs.good())
        return false;

    string s;
    while (getline(ifs, s))
    {
        vector<string> tokens;
        Split(s, tokens, " ");
        if (tokens.size() < 2)
            continue;

        for (int i = 0; i < NUM_LINES; ++i)
        {
            const Line& line = lines[i];
            if (tokens[0] == line.name)
            {
                for (int j = 0; j < line.len; ++j)
                    x[line.start + j] = atoi(tokens[1 + j].c_str());
            }
        }
    }

#ifdef _DEBUG
    cout << "static const int data[" << NUM_PARAMS << "] = {" << endl;
    for (size_t i = 0; i < NUM_PARAMS; ++i){
        cout << x[i] << ", ";
    }
    cout << "};" << endl;
#endif
    return true;
}
