/*
*  Igel - a UCI chess playing engine derived from GreKo 2018.01
*
*  Copyright (C) 2002-2018 Vladimir Medvedev <vrm@bk.ru> (GreKo author)
*  Copyright (C) 2018-2020 Volodymyr Shcherbyna <volodymyr@shcherbyna.com>
*
*  Igel is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  Igel is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with Igel.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "eval_params.h"
#include "notation.h"
#include "utils.h"

vector<int> evalWeights;
int NUM_PARAMS = 0;

Line lines[NUM_LINES] =
{
    Line("Mid_Pawn", 64),
    Line("End_Pawn", 64),
    Line("Mid_Knight", 64),
    Line("End_Knight", 64),
    Line("Mid_Bishop", 64),
    Line("End_Bishop", 64),
    Line("Mid_Rook", 64),
    Line("End_Rook", 64),
    Line("Mid_Queen", 64),
    Line("End_Queen", 64),
    Line("Mid_King", 64),
    Line("End_King", 64),
    Line("Mid_PawnPassed", 64),
    Line("End_PawnPassed", 64),
    Line("Mid_PawnPassedBlocked", 64),
    Line("End_PawnPassedBlocked", 64),
    Line("Mid_PawnPassedFree", 64),
    Line("End_PawnPassedFree", 64),
    Line("Mid_PawnConnectedFree", 64),
    Line("End_PawnConnectedFree", 64),
    Line("Mid_PawnDoubled", 64),
    Line("End_PawnDoubled", 64),
    Line("Mid_PawnIsolated", 64),
    Line("End_PawnIsolated", 64),
    Line("Mid_PawnDoubledIsolated", 64),
    Line("End_PawnDoubledIsolated", 64),
    Line("Mid_PawnBlocked", 64),
    Line("End_PawnBlocked", 64),
    Line("Mid_PawnFence", 64),
    Line("End_PawnFence", 64),
    Line("Mid_PawnOnBiColor", 1),
    Line("End_PawnOnBiColor", 1),
    Line("Mid_KnightStrong", 64),
    Line("End_KnightStrong", 64),
    Line("Mid_KnightForpost", 64),
    Line("End_KnightForpost", 64),
    Line("Mid_KnightKingDist", 10),
    Line("End_KnightKingDist", 10),
    Line("Mid_KnightAndQueen", 1),
    Line("End_KnightAndQueen", 1),
    Line("Mid_BishopStrong", 64),
    Line("End_BishopStrong", 64),
    Line("Mid_BishopMobility", 14),
    Line("End_BishopMobility", 14),
    Line("Mid_KnightMobility", 9),
    Line("End_KnightMobility", 9),
    Line("Mid_BishopKingDist", 10),
    Line("End_BishopKingDist", 10),
    Line("Mid_BishopAndRook", 1),
    Line("End_BishopAndRook", 1),
    Line("Mid_RookMobility", 15),
    Line("End_RookMobility", 15),
    Line("Mid_QueenMobility", 28),
    Line("End_QueenMobility", 28),
    Line("Mid_RookOpen", 1),
    Line("End_RookOpen", 1),
    Line("Mid_Rook7th", 1),
    Line("End_Rook7th", 1),
    Line("Mid_RookKingDist", 10),
    Line("End_RookKingDist", 10),
    Line("Mid_Queen7th", 1),
    Line("End_Queen7th", 1),
    Line("Mid_QueenKingDist", 10),
    Line("End_QueenKingDist", 10),
    Line("Mid_KingPawnShield", 10),
    Line("End_KingPawnShield", 10),
    Line("Mid_KingPawnStorm", 10),
    Line("End_KingPawnStorm", 10),
    Line("Mid_KingPassedDist", 10),
    Line("End_KingPassedDist", 10),
    Line("Mid_AttackKingZone", 4),
    Line("End_AttackKingZone", 4),
    Line("Mid_AttackStronger", 1),
    Line("End_AttackStronger", 1),
    Line("Mid_AttackCenter", 1),
    Line("End_AttackCenter", 1),
    Line("Mid_ConnectedRooks", 1),
    Line("End_ConnectedRooks", 1),
    Line("Mid_BishopsPair", 1),
    Line("End_BishopsPair", 1),
    Line("Mid_RooksPair", 1),
    Line("End_RooksPair", 1),
    Line("Mid_KnightsPair", 1),
    Line("End_KnightsPair", 1),
    Line("Mid_Tempo", 1),
    Line("End_Tempo", 1)
};

void InitParamLines()
{
    for (int i = 1; i < NUM_LINES; ++i)
        lines[i].start = lines[i - 1].start + lines[i - 1].len;
    NUM_PARAMS = lines[NUM_LINES - 1].start + lines[NUM_LINES - 1].len;
}

void SetMaterialOnlyValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);
}

void SetDefaultValues(vector<int>& x)
{
    x.resize(NUM_PARAMS);

    static const int data[2610] = {0, 0, 0, 0, 0, 0, 0, 0, 78, 37, 42, 189, 149, 239, 97, -39, -15, -9, 26, -6, 53, 88, 29, -8, 0, -5, 1, 15, 21, 9, 5, 3, -7, -11, -5, 8, 10, 12, -6, -9, -11, -7, -6, -9, 6, 2, 14, -9, -14, -8, -15, -13, -5, 7, 15, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 164, 157, 114, 112, 83, 153, 139, 79, 112, 88, 64, 48, 48, 76, 77, 30, 26, 26, 18, 11, 17, 18, 16, -4, 9, -3, 1, -1, -4, 7, -11, -3, 6, -3, -6, 3, -5, -3, -16, -1, 4, 6, 2, 18, 0, -2, -13, 0, 0, 0, 0, 0, 0, 0, 0, -185, -92, -60, -47, 10, -87, -60, -112, -82, -46, 23, -5, 2, 23, -1, -26, -57, 8, -18, 18, 33, 106, 29, 27, 11, 14, 19, 34, 22, 56, 22, 34, 9, 18, 21, 19, 21, 22, 29, 9, -10, 12, 20, 30, 41, 34, 40, 9, -8, -14, 9, 24, 20, 23, 21, 15, -70, -10, -8, 7, 19, 19, -3, 1, -24, -11, 4, -4, -10, -17, -36, -71, 8, 20, -9, 19, -5, 2, -9, -31, 5, 6, 37, 27, 14, -15, -13, -30, 8, 20, 33, 29, 28, 21, 18, -6, 2, 9, 28, 30, 35, 22, 11, -4, 4, 11, 11, 25, 17, 9, -6, -7, -12, -3, 7, 3, 4, -3, -6, -19, 1, -14, 0, 3, -9, -9, -19, -43, -35, -12, -118, -65, -37, -66, -39, -1, -38, -26, -31, -46, -27, 20, -35, -63, -6, 2, 15, 7, 7, 44, 19, 17, -8, 16, 13, 38, 34, 30, 30, -8, 5, -1, 19, 35, 33, 20, 16, 32, 9, 29, 31, 29, 31, 44, 41, 26, 13, 26, 30, 18, 26, 38, 43, 29, -7, 17, 5, 9, 23, 1, -19, 2, -5, -10, 12, 6, 0, 9, -11, -26, 5, 4, 11, 5, -1, -16, 2, 8, 1, 7, 0, 6, -4, -5, -5, -1, 8, 0, 7, 9, 13, 1, -12, 4, -4, 1, 8, 12, 3, 3, -6, -25, -17, 1, 5, 5, 12, -3, -8, -16, -14, -25, -18, -8, -5, -13, -20, -33, -10, -13, -14, -11, -8, -6, 1, -18, 20, 37, 29, 56, 37, 3, 17, 13, 12, 28, 60, 60, 52, 64, 35, 46, -3, 27, 26, 33, 29, 40, 75, 17, -10, -9, 2, 28, 10, 24, 4, 2, -15, -21, -9, -2, 6, -8, 23, -3, -17, -15, -4, -4, 5, 9, 16, -14, -22, -11, -3, 8, 13, 16, 15, -54, -16, 0, 6, 14, 19, 17, -12, -9, 35, 27, 34, 24, 23, 46, 37, 45, 27, 27, 23, 20, 16, 16, 30, 20, 38, 32, 32, 25, 27, 22, 16, 23, 42, 39, 40, 26, 26, 20, 34, 31, 32, 29, 29, 26, 19, 27, 8, 21, 25, 20, 21, 20, 13, 7, 14, 19, 22, 14, 22, 14, 11, 4, 9, 41, 13, 10, 15, 5, 4, 4, 28, 1, -26, 0, 15, -8, 42, 40, 17, 40, -7, -8, -12, -3, -52, 20, -4, 44, -10, -9, -14, -39, -19, 15, -8, 1, -26, -22, -23, -22, -36, -20, -29, -18, -2, -20, -13, -16, -12, -17, -10, -2, 0, 10, 1, -8, 2, 11, 18, 7, -10, 8, 13, 15, 14, 21, 8, 24, 22, 12, 14, 15, 12, 8, -4, -46, 27, 25, 15, 0, -26, 9, 12, 13, 39, 44, 38, -1, 33, -4, 36, 24, 24, 19, 1, 27, 0, -22, 13, 6, 64, 55, 13, 5, -1, -4, 50, 23, 36, 50, 12, 26, -6, -2, 12, 28, 45, 11, 43, 1, -7, 18, 20, 18, 39, 17, 16, 7, 5, 10, 8, 8, 12, 22, 34, -9, 22, 20, 40, 28, -38, 44, 72, 24, 1, -9, 14, 3, 43, 101, 45, 50, 18, 85, 31, -23, 46, 75, 122, 84, 68, 173, 193, 1, -3, 57, 97, 49, 21, 35, 43, -23, -49, 8, -1, -35, -52, -17, -31, -70, -8, -5, -15, -22, -26, -31, -1, -31, -9, 4, -5, -45, -35, -21, 5, 21, -36, 27, 5, -72, -20, -52, -1, 15, -85, -30, -22, -10, 7, 20, 3, -17, -7, 11, 21, 24, 26, 31, 24, 18, -1, 16, 10, 11, 16, 24, 15, 9, -13, 9, 11, 22, 25, 27, 17, 0, -11, 1, 21, 32, 30, 17, 9, -8, -22, 0, 11, 19, 20, 14, 1, -8, -6, -3, 6, 16, 16, 9, -4, -18, -29, -29, -12, 10, -19, 3, -20, -46, 0, 0, 0, 0, 0, 0, 0, 0, 165, 116, 85, -35, 15, 55, 44, 258, 63, 44, 9, 20, 19, 1, 41, 13, 14, 16, 17, 6, 22, 72, 12, -3, 1, -1, -6, -7, -10, -5, -2, 3, -10, -14, -20, -19, -18, 15, -16, 0, -14, -8, -11, -29, -30, -20, -5, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 29, 10, 11, 22, 10, 21, 13, 57, 24, 20, 13, 14, 39, 14, 29, 48, 51, 44, 35, 34, 26, 49, 46, 28, 18, 20, 25, 31, 18, 33, 25, -3, 3, 4, 5, -1, -12, -7, -11, -15, -10, -20, -12, -21, -26, -22, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -5, 0, -30, -13, -14, -30, -198, -27, 2, 41, 11, -37, 60, -4, -3, 2, -15, -4, -3, -1, -50, 27, 13, -3, -13, -17, -8, 7, 38, -12, -6, -3, 13, 8, -9, 8, 11, 0, 8, -8, -5, -12, -3, 37, 1, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -84, -64, -61, -90, -84, -118, -67, -2, -5, -14, -22, -10, -8, 24, 0, -1, -2, -2, 12, 7, 9, -2, -4, -5, 10, 6, 5, -9, -2, -13, 4, -4, 5, -2, -6, -5, -1, 20, 0, -9, -11, -3, -2, -27, -4, -29, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, -27, 17, 28, -20, -54, -46, 55, 30, 31, -6, 36, -15, 22, -11, 57, -22, -9, -14, -6, -16, -33, 5, 3, -23, -8, 0, -3, -5, -18, -12, -3, -9, -18, -5, -10, -11, -17, -12, -11, -6, 0, -1, 2, -2, 5, -18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 47, 41, 52, 54, 73, 34, 38, 46, 39, 32, 43, 42, 82, 62, 32, 23, -1, 2, 11, 19, 32, 30, 24, 12, 3, -6, -8, 10, 4, 21, 14, -4, 2, -18, -5, 0, 21, 20, 17, 5, -2, -2, 5, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 24, -1, 39, 151, -28, 37, 65, 24, 85, 76, 51, 56, 174, 202, 74, 65, 50, 26, 45, 59, 25, 31, 121, 13, 1, -31, -16, -20, 13, 7, -1, 0, -3, 11, 54, -1, -17, -23, -32, -13, 2, -6, -6, -15, 15, 6, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, -18, -5, -14, 96, 70, -46, 23, -4, 20, 15, 47, 23, 17, -8, 28, -8, 4, 6, 12, 15, 12, 2, -8, -6, 5, 18, -6, 23, 15, 13, 3, -3, 8, -10, 14, 10, 5, -2, -1, 0, -14, -8, 20, -10, -3, 9, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -20, -123, -14, -20, -26, -17, -55, -38, -29, -6, 8, -28, -12, 57, -57, -32, 15, -4, -9, -10, -4, 22, -37, -41, 10, -14, 1, 0, -6, 18, -33, -56, -15, -2, 14, -27, 0, -1, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -9, -5, -26, -10, -54, -37, 3, -28, -12, -20, -25, -22, -26, -44, -49, -40, -26, -10, -1, -11, -15, -29, -33, -35, -18, -15, -19, -18, -17, -30, -30, -26, -16, -33, -18, -36, -26, -23, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 45, 8, 4, -22, -5, -6, 3, 7, 8, 0, 2, 2, 0, 28, 9, 14, 5, -12, -23, -31, -1, 22, 11, 3, -3, -18, -26, -26, -23, -3, 4, -7, -17, -26, -21, -31, -18, -36, -13, -1, -18, -4, -23, -25, -11, -21, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, -7, -6, 8, 8, 37, -6, 7, -16, -23, -8, -2, 1, 6, -14, -9, -11, -16, -13, -12, -10, -9, -15, -6, 1, -8, -6, -15, -11, -3, -13, -5, -3, -10, -12, -9, -14, -7, -8, -2, -1, 0, -17, -4, -18, -1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -56, -19, -6, -38, 3, 22, 16, -4, 8, -12, 16, 3, 70, -20, -41, -7, 5, 9, -3, -8, 17, 3, -25, -1, 7, 7, 0, -27, -3, 10, 7, 10, 1, 61, 1, 11, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, -4, -17, -2, 12, -4, -34, 65, -7, -25, -3, -10, -19, -12, -12, 20, 8, 4, -14, -21, 0, -24, -8, 5, -3, -7, -2, -3, 1, -10, 1, -3, 2, -15, 14, -32, -6, -4, 3, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 19, -3, -2, 0, 2, 21, 13, 23, -11, 3, 13, -29, -29, -4, -11, 2, -7, -17, -14, -10, -25, -16, -8, 2, -9, -11, -14, -12, 0, 6, -3, -8, -9, -1, -5, -8, -7, -1, -6, 1, -11, -28, -24, -14, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -13, -18, -6, -9, -17, 11, -10, -34, -39, -35, -9, -9, -31, -27, -29, -16, -9, -19, -17, -14, -16, -6, -11, -7, -14, -9, -15, -12, -14, -10, -9, -4, -7, -4, -3, -4, -5, -2, 2, -7, -5, -4, 6, 1, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -12, -20, -31, -96, -8, 8, 11, -5, -10, -10, -12, -2, -1, -2, -9, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 5, 1, 2, 0, -3, 4, 2, 8, 5, -12, -1, 5, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, -44, -49, -40, -19, -12, -21, -27, -2, -5, -6, -9, -3, -4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, -1, 1, 6, 9, 2, -1, 3, 2, 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, -3, -7, 37, 20, 42, 8, 10, 69, 13, -8, -18, 17, -13, 9, 18, 54, -39, -4, 138, 53, 46, 27, 60, 20, 21, 45, 23, 24, 42, 47, 45, 52, 88, 39, 21, 20, 26, 28, 32, 57, 28, 36, 12, 0, 6, -20, 0, -5, -30, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -100, 68, 114, 7, 106, 55, 52, -40, -9, -16, 3, 45, -17, 43, 100, -24, -4, 17, 34, 24, 37, 47, 30, 17, 7, 15, 21, 28, 22, -6, 16, 1, 25, 12, 16, 10, -3, 10, 10, -46, 9, 7, 21, 11, 3, 30, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 8, -1, 9, 0, 6, 0, 10, -9, -5, 5, 4, -1, 4, -14, 31, -71, -5, 10, 12, 128, 170, -41, 41, -10, -29, -52, -9, 16, -22, -9, -18, 21, 2, -18, 28, -47, 24, 17, 21, 100, -34, -39, 8, 7, 37, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, -8, 6, 0, 3, 0, 6, 37, -106, -2, -22, -65, -5, 2, -4, 63, 8, 12, 4, -9, 1, 18, -114, 31, 15, 57, 20, 25, -2, -50, -2, 26, -26, 25, 7, 14, -7, 115, -44, -13, 23, 44, 60, 24, 38, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 41, 12, 21, 9, 11, 1, 6, -28, 0, -27, -25, -5, 2, 0, -4, 0, -6, 7, 36, 14, 10, 14, 22, 35, 93, 18, 12, 10, 96, 15, 72, 66, 39, 59, 12, 52, 42, 89, -1, 36, 40, 21, 59, -45, 27, 28, 18, 28, 51, 63, 43, -10, 20, 44, 39, 44, 73, 31, 12, 96, 68, 8, 34, 26, 11, 4, 13, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 22, -29, -59, 32, 32, 66, -264, -24, 36, 8, 22, 8, 20, 14, -52, -36, -24, 14, -9, 8, 24, -2, 16, -37, 9, 7, 5, -5, -9, 11, 3, 0, 5, 4, 5, -5, 8, 22, -42, -22, 25, 1, 14, 15, 14, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -8, 1, 9, 16, 18, 16, 14, 14, 19, 34, 26, 14, 25, -38, -23, -8, -1, 0, 4, 7, 10, 12, 10, -2, 5, 11, 8, -40, -19, -7, 0, 4, 10, 15, 16, 29, -46, -12, 0, 2, 5, 5, 4, -1, -15, 0, 35, 27, 3, 9, 8, 11, 12, 21, 29, 0, -33, -6, 1, 3, 2, 1, 8, -1, 1, 37, 8, -6, -2, -2, 0, -2, 1, 4, 7, 11, 22, 31, 51, 49, 41, 33, -39, -14, 1, 5, 12, 17, 18, 18, 20, 20, 18, 11, 17, 14, 11, -28, -12, -5, -1, 2, 3, 7, 8, 12, 13, 16, 18, 24, 29, 26, 49, 43, 50, 51, 65, 67, 77, 68, 66, 35, 27, 117, 45, -82, -60, -29, -15, -6, 2, 7, 16, 11, 18, 21, 23, 18, 16, 28, 14, 14, 23, 26, 26, 24, 27, 20, 25, 29, 40, 42, 34, 27, 8, -14, 21, 0, 46, 27, 3, -2, 6, -1, -5, -7, 9, 0, -14, 10, 18, 20, 16, 16, 23, 30, 24, -26, 10, 0, 690, 94, 44, 31, 20, 16, 5, -3, -12, 0, 129, 70, 63, 46, 35, 6, 14, 10, 3, 51, 44, 28, 22, 6, -4, -14, -27, -24, -56, -37, -8, -11, -10, -1, -4, 2, 5, 8, 1, 4, 7, -11, -16, -41, -45, -89, -80, -3, -10, -7, -2, 8, 10, 18, 5, 11, 17, -12, -189, -85, -31, -6, -4, 0, -6, -12, -17, 5, 11, -28, -28, -16, -2, 8, 15, 20, 23, 8, 6, -12, -7, 28, 126, 1, 0, 1, -12, 69, 8, 0, 14, 1, 4, 49, 9, 24, -4, 53, -27, 31, 17};
    memcpy(&(x[0]), data, 2610 * sizeof(int));
    assert(NUM_PARAMS == 2610);
}

void WriteParamsToFile(const vector<int>& x, const std::string& filename)
{
    ofstream ofs(filename.c_str());
    if (!ofs.good())
        return;

    for (int i = 0; i < NUM_LINES; ++i)
    {
        const Line& line = lines[i];
        ofs << line.name;
        for (int j = line.start; j < line.start + line.len; ++j)
            ofs << " " << x[j];
        ofs << endl;
    }
}

std::string ParamNumberToName(size_t n)
{
    stringstream ss;
    ss << "Param_" << n;
    return ss.str();
}

bool ReadParamsFromFile(vector<int>& x, const std::string& filename)
{
    x.resize(NUM_PARAMS);

    ifstream ifs(filename.c_str());
    if (!ifs.good())
        return false;

    string s;
    while (getline(ifs, s))
    {
        vector<string> tokens;
        Split(s, tokens, " ");
        if (tokens.size() < 2)
            continue;

        for (int i = 0; i < NUM_LINES; ++i)
        {
            const Line& line = lines[i];
            if (tokens[0] == line.name)
            {
                for (int j = 0; j < line.len; ++j)
                    x[line.start + j] = atoi(tokens[1 + j].c_str());
            }
        }
    }

#ifdef _DEBUG
    cout << "static const int data[" << NUM_PARAMS << "] = {" << endl;
    for (size_t i = 0; i < NUM_PARAMS; ++i){
        cout << x[i] << ", ";
    }
    cout << "};" << endl;
#endif
    return true;
}
